using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TCG.PaymentGateways.Classes.Payments
{
    public class Transaction_Result
    {
        public bool isApproved { get; set; }            // Indicates whether the transaction was successful (True) or unsuccessful (False).
        public bool isPending { get; set; }
        public string ApprovalCode { get; set; }        // Contains an authorization code for an approved transaction

        public string ResultCode { get; set; }          // Indicates the success or failure of the transaction.
        public string ResultText { get; set; }          // Contains a human-readable message explaining the code.
        public string TransactionIndex { get; set; }    // Host-generated transaction identifier, used for Captures, Credits, or Voids.
        public string ProcessorCode { get; set; }       // Return code generated by the processor, or additional gateway response code that may contain more information beyond "Approved" or "Declined".

        public string FullRequest { get; set; }         // Raw Request Sent
        public string FullResponse { get; set; }        // Raw Request Returned

        public bool hasServerError { get; set; }        // If the server threw an error on our side
        public string ErrorCode { get; set; }           // Additional code returned for declined or failed transactions.
        public string ErrorText { get; set; }           // Description of the error which occurred.

        public string ProviderToken { get; set; }       //needed for point in time tokenization and revoke-tion

        public Transaction_Result testApproved(string TestMethod)
        {
            if (hasServerError)
                throw new Exception(TestMethod + ": " + ErrorText);

            if (!isApproved)
                throw new Exception(TestMethod + ": " + ErrorText);

            return this;
        }

        public Transaction_Result testNotApproved(string TestMethod)
        {
            if (hasServerError)
                throw new Exception(TestMethod + ": " + ErrorText);

            if (isApproved)
                throw new Exception(TestMethod + ": " + ErrorText);

            return this;
        }
    }
}
