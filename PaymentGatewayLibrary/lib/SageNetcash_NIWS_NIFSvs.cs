//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.6.81.0.
// 

namespace TCG.PaymentGatewayLibrary.SageNetcash.NIWS.NIF
{
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BasicHttpBinding_INIWS_NIF", Namespace = "http://tempuri.org/")]
    public partial class NIWS_NIF : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback RequestActionDateOperationCompleted;

        private System.Threading.SendOrPostCallback RequestInterimMerchantStatementOperationCompleted;

        private System.Threading.SendOrPostCallback RequestMerchantStatementOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveMerchantStatementOperationCompleted;

        private System.Threading.SendOrPostCallback RequestTransactionTypesOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveTransactionTypesOperationCompleted;

        private System.Threading.SendOrPostCallback LegacyCompactBatchFileUploadOperationCompleted;

        private System.Threading.SendOrPostCallback LegacyBatchFileUploadOperationCompleted;

        private System.Threading.SendOrPostCallback BatchFileUploadOperationCompleted;

        private System.Threading.SendOrPostCallback RequestFileUploadReportOperationCompleted;

        private System.Threading.SendOrPostCallback RequestCombinedUploadReportForDateOperationCompleted;

        private System.Threading.SendOrPostCallback RequestCreditDataReportOperationCompleted;

        private System.Threading.SendOrPostCallback RequestAVSReportOperationCompleted;

        private System.Threading.SendOrPostCallback RequestPayNowInvoiceOperationCompleted;

        private System.Threading.SendOrPostCallback IsValidServiceKeyOperationCompleted;

        private System.Threading.SendOrPostCallback AccountServiceKeysOperationCompleted;

        private System.Threading.SendOrPostCallback MerchantStatementSourceStatusOperationCompleted;

        /// <remarks/>
        public NIWS_NIF()
        {
            this.Url = "https://ws.sagepay.co.za/NIWS/NIWS_NIF.svc";
        }

        /// <remarks/>
        public event RequestActionDateCompletedEventHandler RequestActionDateCompleted;

        /// <remarks/>
        public event RequestInterimMerchantStatementCompletedEventHandler RequestInterimMerchantStatementCompleted;

        /// <remarks/>
        public event RequestMerchantStatementCompletedEventHandler RequestMerchantStatementCompleted;

        /// <remarks/>
        public event RetrieveMerchantStatementCompletedEventHandler RetrieveMerchantStatementCompleted;

        /// <remarks/>
        public event RequestTransactionTypesCompletedEventHandler RequestTransactionTypesCompleted;

        /// <remarks/>
        public event RetrieveTransactionTypesCompletedEventHandler RetrieveTransactionTypesCompleted;

        /// <remarks/>
        public event LegacyCompactBatchFileUploadCompletedEventHandler LegacyCompactBatchFileUploadCompleted;

        /// <remarks/>
        public event LegacyBatchFileUploadCompletedEventHandler LegacyBatchFileUploadCompleted;

        /// <remarks/>
        public event BatchFileUploadCompletedEventHandler BatchFileUploadCompleted;

        /// <remarks/>
        public event RequestFileUploadReportCompletedEventHandler RequestFileUploadReportCompleted;

        /// <remarks/>
        public event RequestCombinedUploadReportForDateCompletedEventHandler RequestCombinedUploadReportForDateCompleted;

        /// <remarks/>
        public event RequestCreditDataReportCompletedEventHandler RequestCreditDataReportCompleted;

        /// <remarks/>
        public event RequestAVSReportCompletedEventHandler RequestAVSReportCompleted;

        /// <remarks/>
        public event RequestPayNowInvoiceCompletedEventHandler RequestPayNowInvoiceCompleted;

        /// <remarks/>
        public event IsValidServiceKeyCompletedEventHandler IsValidServiceKeyCompleted;

        /// <remarks/>
        public event AccountServiceKeysCompletedEventHandler AccountServiceKeysCompleted;

        /// <remarks/>
        public event MerchantStatementSourceStatusCompletedEventHandler MerchantStatementSourceStatusCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestActionDate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestActionDate([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string Date, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string Instruction, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ForwardActionDate)
        {
            object[] results = this.Invoke("RequestActionDate", new object[] {
                    ServiceKey,
                    Date,
                    Instruction,
                    ForwardActionDate});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestActionDate(string ServiceKey, string Date, string Instruction, string ForwardActionDate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestActionDate", new object[] {
                    ServiceKey,
                    Date,
                    Instruction,
                    ForwardActionDate}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestActionDate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestActionDateAsync(string ServiceKey, string Date, string Instruction, string ForwardActionDate)
        {
            this.RequestActionDateAsync(ServiceKey, Date, Instruction, ForwardActionDate, null);
        }

        /// <remarks/>
        public void RequestActionDateAsync(string ServiceKey, string Date, string Instruction, string ForwardActionDate, object userState)
        {
            if ((this.RequestActionDateOperationCompleted == null))
            {
                this.RequestActionDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestActionDateOperationCompleted);
            }
            this.InvokeAsync("RequestActionDate", new object[] {
                    ServiceKey,
                    Date,
                    Instruction,
                    ForwardActionDate}, this.RequestActionDateOperationCompleted, userState);
        }

        private void OnRequestActionDateOperationCompleted(object arg)
        {
            if ((this.RequestActionDateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestActionDateCompleted(this, new RequestActionDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestInterimMerchantStatement", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestInterimMerchantStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey)
        {
            object[] results = this.Invoke("RequestInterimMerchantStatement", new object[] {
                    ServiceKey});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestInterimMerchantStatement(string ServiceKey, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestInterimMerchantStatement", new object[] {
                    ServiceKey}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestInterimMerchantStatement(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestInterimMerchantStatementAsync(string ServiceKey)
        {
            this.RequestInterimMerchantStatementAsync(ServiceKey, null);
        }

        /// <remarks/>
        public void RequestInterimMerchantStatementAsync(string ServiceKey, object userState)
        {
            if ((this.RequestInterimMerchantStatementOperationCompleted == null))
            {
                this.RequestInterimMerchantStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestInterimMerchantStatementOperationCompleted);
            }
            this.InvokeAsync("RequestInterimMerchantStatement", new object[] {
                    ServiceKey}, this.RequestInterimMerchantStatementOperationCompleted, userState);
        }

        private void OnRequestInterimMerchantStatementOperationCompleted(object arg)
        {
            if ((this.RequestInterimMerchantStatementCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestInterimMerchantStatementCompleted(this, new RequestInterimMerchantStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestMerchantStatement", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestMerchantStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string FromActionDate)
        {
            object[] results = this.Invoke("RequestMerchantStatement", new object[] {
                    ServiceKey,
                    FromActionDate});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestMerchantStatement(string ServiceKey, string FromActionDate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestMerchantStatement", new object[] {
                    ServiceKey,
                    FromActionDate}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestMerchantStatement(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestMerchantStatementAsync(string ServiceKey, string FromActionDate)
        {
            this.RequestMerchantStatementAsync(ServiceKey, FromActionDate, null);
        }

        /// <remarks/>
        public void RequestMerchantStatementAsync(string ServiceKey, string FromActionDate, object userState)
        {
            if ((this.RequestMerchantStatementOperationCompleted == null))
            {
                this.RequestMerchantStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestMerchantStatementOperationCompleted);
            }
            this.InvokeAsync("RequestMerchantStatement", new object[] {
                    ServiceKey,
                    FromActionDate}, this.RequestMerchantStatementOperationCompleted, userState);
        }

        private void OnRequestMerchantStatementOperationCompleted(object arg)
        {
            if ((this.RequestMerchantStatementCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestMerchantStatementCompleted(this, new RequestMerchantStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RetrieveMerchantStatement", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RetrieveMerchantStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string PollingId)
        {
            object[] results = this.Invoke("RetrieveMerchantStatement", new object[] {
                    ServiceKey,
                    PollingId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveMerchantStatement(string ServiceKey, string PollingId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveMerchantStatement", new object[] {
                    ServiceKey,
                    PollingId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRetrieveMerchantStatement(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RetrieveMerchantStatementAsync(string ServiceKey, string PollingId)
        {
            this.RetrieveMerchantStatementAsync(ServiceKey, PollingId, null);
        }

        /// <remarks/>
        public void RetrieveMerchantStatementAsync(string ServiceKey, string PollingId, object userState)
        {
            if ((this.RetrieveMerchantStatementOperationCompleted == null))
            {
                this.RetrieveMerchantStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveMerchantStatementOperationCompleted);
            }
            this.InvokeAsync("RetrieveMerchantStatement", new object[] {
                    ServiceKey,
                    PollingId}, this.RetrieveMerchantStatementOperationCompleted, userState);
        }

        private void OnRetrieveMerchantStatementOperationCompleted(object arg)
        {
            if ((this.RetrieveMerchantStatementCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveMerchantStatementCompleted(this, new RetrieveMerchantStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestTransactionTypes", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestTransactionTypes([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey)
        {
            object[] results = this.Invoke("RequestTransactionTypes", new object[] {
                    ServiceKey});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestTransactionTypes(string ServiceKey, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestTransactionTypes", new object[] {
                    ServiceKey}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestTransactionTypes(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestTransactionTypesAsync(string ServiceKey)
        {
            this.RequestTransactionTypesAsync(ServiceKey, null);
        }

        /// <remarks/>
        public void RequestTransactionTypesAsync(string ServiceKey, object userState)
        {
            if ((this.RequestTransactionTypesOperationCompleted == null))
            {
                this.RequestTransactionTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestTransactionTypesOperationCompleted);
            }
            this.InvokeAsync("RequestTransactionTypes", new object[] {
                    ServiceKey}, this.RequestTransactionTypesOperationCompleted, userState);
        }

        private void OnRequestTransactionTypesOperationCompleted(object arg)
        {
            if ((this.RequestTransactionTypesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestTransactionTypesCompleted(this, new RequestTransactionTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RetrieveTransactionTypes", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RetrieveTransactionTypes([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string PollingId)
        {
            object[] results = this.Invoke("RetrieveTransactionTypes", new object[] {
                    ServiceKey,
                    PollingId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveTransactionTypes(string ServiceKey, string PollingId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveTransactionTypes", new object[] {
                    ServiceKey,
                    PollingId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRetrieveTransactionTypes(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RetrieveTransactionTypesAsync(string ServiceKey, string PollingId)
        {
            this.RetrieveTransactionTypesAsync(ServiceKey, PollingId, null);
        }

        /// <remarks/>
        public void RetrieveTransactionTypesAsync(string ServiceKey, string PollingId, object userState)
        {
            if ((this.RetrieveTransactionTypesOperationCompleted == null))
            {
                this.RetrieveTransactionTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveTransactionTypesOperationCompleted);
            }
            this.InvokeAsync("RetrieveTransactionTypes", new object[] {
                    ServiceKey,
                    PollingId}, this.RetrieveTransactionTypesOperationCompleted, userState);
        }

        private void OnRetrieveTransactionTypesOperationCompleted(object arg)
        {
            if ((this.RetrieveTransactionTypesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveTransactionTypesCompleted(this, new RetrieveTransactionTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/LegacyCompactBatchFileUpload", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string LegacyCompactBatchFileUpload([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string UserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string PIN, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string File, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ProcessAsLegacy)
        {
            object[] results = this.Invoke("LegacyCompactBatchFileUpload", new object[] {
                    UserName,
                    Password,
                    PIN,
                    File,
                    ProcessAsLegacy});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginLegacyCompactBatchFileUpload(string UserName, string Password, string PIN, string File, string ProcessAsLegacy, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("LegacyCompactBatchFileUpload", new object[] {
                    UserName,
                    Password,
                    PIN,
                    File,
                    ProcessAsLegacy}, callback, asyncState);
        }

        /// <remarks/>
        public string EndLegacyCompactBatchFileUpload(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LegacyCompactBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy)
        {
            this.LegacyCompactBatchFileUploadAsync(UserName, Password, PIN, File, ProcessAsLegacy, null);
        }

        /// <remarks/>
        public void LegacyCompactBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy, object userState)
        {
            if ((this.LegacyCompactBatchFileUploadOperationCompleted == null))
            {
                this.LegacyCompactBatchFileUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLegacyCompactBatchFileUploadOperationCompleted);
            }
            this.InvokeAsync("LegacyCompactBatchFileUpload", new object[] {
                    UserName,
                    Password,
                    PIN,
                    File,
                    ProcessAsLegacy}, this.LegacyCompactBatchFileUploadOperationCompleted, userState);
        }

        private void OnLegacyCompactBatchFileUploadOperationCompleted(object arg)
        {
            if ((this.LegacyCompactBatchFileUploadCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LegacyCompactBatchFileUploadCompleted(this, new LegacyCompactBatchFileUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/LegacyBatchFileUpload", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string LegacyBatchFileUpload([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string UserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string PIN, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string File, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ProcessAsLegacy)
        {
            object[] results = this.Invoke("LegacyBatchFileUpload", new object[] {
                    UserName,
                    Password,
                    PIN,
                    File,
                    ProcessAsLegacy});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginLegacyBatchFileUpload(string UserName, string Password, string PIN, string File, string ProcessAsLegacy, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("LegacyBatchFileUpload", new object[] {
                    UserName,
                    Password,
                    PIN,
                    File,
                    ProcessAsLegacy}, callback, asyncState);
        }

        /// <remarks/>
        public string EndLegacyBatchFileUpload(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LegacyBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy)
        {
            this.LegacyBatchFileUploadAsync(UserName, Password, PIN, File, ProcessAsLegacy, null);
        }

        /// <remarks/>
        public void LegacyBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy, object userState)
        {
            if ((this.LegacyBatchFileUploadOperationCompleted == null))
            {
                this.LegacyBatchFileUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLegacyBatchFileUploadOperationCompleted);
            }
            this.InvokeAsync("LegacyBatchFileUpload", new object[] {
                    UserName,
                    Password,
                    PIN,
                    File,
                    ProcessAsLegacy}, this.LegacyBatchFileUploadOperationCompleted, userState);
        }

        private void OnLegacyBatchFileUploadOperationCompleted(object arg)
        {
            if ((this.LegacyBatchFileUploadCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LegacyBatchFileUploadCompleted(this, new LegacyBatchFileUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/BatchFileUpload", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string BatchFileUpload([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string File)
        {
            object[] results = this.Invoke("BatchFileUpload", new object[] {
                    ServiceKey,
                    File});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBatchFileUpload(string ServiceKey, string File, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BatchFileUpload", new object[] {
                    ServiceKey,
                    File}, callback, asyncState);
        }

        /// <remarks/>
        public string EndBatchFileUpload(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void BatchFileUploadAsync(string ServiceKey, string File)
        {
            this.BatchFileUploadAsync(ServiceKey, File, null);
        }

        /// <remarks/>
        public void BatchFileUploadAsync(string ServiceKey, string File, object userState)
        {
            if ((this.BatchFileUploadOperationCompleted == null))
            {
                this.BatchFileUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchFileUploadOperationCompleted);
            }
            this.InvokeAsync("BatchFileUpload", new object[] {
                    ServiceKey,
                    File}, this.BatchFileUploadOperationCompleted, userState);
        }

        private void OnBatchFileUploadOperationCompleted(object arg)
        {
            if ((this.BatchFileUploadCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchFileUploadCompleted(this, new BatchFileUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestFileUploadReport", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestFileUploadReport([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string FileToken)
        {
            object[] results = this.Invoke("RequestFileUploadReport", new object[] {
                    ServiceKey,
                    FileToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestFileUploadReport(string ServiceKey, string FileToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestFileUploadReport", new object[] {
                    ServiceKey,
                    FileToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestFileUploadReport(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestFileUploadReportAsync(string ServiceKey, string FileToken)
        {
            this.RequestFileUploadReportAsync(ServiceKey, FileToken, null);
        }

        /// <remarks/>
        public void RequestFileUploadReportAsync(string ServiceKey, string FileToken, object userState)
        {
            if ((this.RequestFileUploadReportOperationCompleted == null))
            {
                this.RequestFileUploadReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestFileUploadReportOperationCompleted);
            }
            this.InvokeAsync("RequestFileUploadReport", new object[] {
                    ServiceKey,
                    FileToken}, this.RequestFileUploadReportOperationCompleted, userState);
        }

        private void OnRequestFileUploadReportOperationCompleted(object arg)
        {
            if ((this.RequestFileUploadReportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestFileUploadReportCompleted(this, new RequestFileUploadReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestCombinedUploadReportForDate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestCombinedUploadReportForDate([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string Date)
        {
            object[] results = this.Invoke("RequestCombinedUploadReportForDate", new object[] {
                    ServiceKey,
                    Date});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestCombinedUploadReportForDate(string ServiceKey, string Date, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestCombinedUploadReportForDate", new object[] {
                    ServiceKey,
                    Date}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestCombinedUploadReportForDate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestCombinedUploadReportForDateAsync(string ServiceKey, string Date)
        {
            this.RequestCombinedUploadReportForDateAsync(ServiceKey, Date, null);
        }

        /// <remarks/>
        public void RequestCombinedUploadReportForDateAsync(string ServiceKey, string Date, object userState)
        {
            if ((this.RequestCombinedUploadReportForDateOperationCompleted == null))
            {
                this.RequestCombinedUploadReportForDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestCombinedUploadReportForDateOperationCompleted);
            }
            this.InvokeAsync("RequestCombinedUploadReportForDate", new object[] {
                    ServiceKey,
                    Date}, this.RequestCombinedUploadReportForDateOperationCompleted, userState);
        }

        private void OnRequestCombinedUploadReportForDateOperationCompleted(object arg)
        {
            if ((this.RequestCombinedUploadReportForDateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestCombinedUploadReportForDateCompleted(this, new RequestCombinedUploadReportForDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestCreditDataReport", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable = true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] RequestCreditDataReport([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string FileToken)
        {
            object[] results = this.Invoke("RequestCreditDataReport", new object[] {
                    ServiceKey,
                    FileToken});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestCreditDataReport(string ServiceKey, string FileToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestCreditDataReport", new object[] {
                    ServiceKey,
                    FileToken}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndRequestCreditDataReport(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void RequestCreditDataReportAsync(string ServiceKey, string FileToken)
        {
            this.RequestCreditDataReportAsync(ServiceKey, FileToken, null);
        }

        /// <remarks/>
        public void RequestCreditDataReportAsync(string ServiceKey, string FileToken, object userState)
        {
            if ((this.RequestCreditDataReportOperationCompleted == null))
            {
                this.RequestCreditDataReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestCreditDataReportOperationCompleted);
            }
            this.InvokeAsync("RequestCreditDataReport", new object[] {
                    ServiceKey,
                    FileToken}, this.RequestCreditDataReportOperationCompleted, userState);
        }

        private void OnRequestCreditDataReportOperationCompleted(object arg)
        {
            if ((this.RequestCreditDataReportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestCreditDataReportCompleted(this, new RequestCreditDataReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestAVSReport", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestAVSReport([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string FileToken)
        {
            object[] results = this.Invoke("RequestAVSReport", new object[] {
                    ServiceKey,
                    FileToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestAVSReport(string ServiceKey, string FileToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestAVSReport", new object[] {
                    ServiceKey,
                    FileToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestAVSReport(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestAVSReportAsync(string ServiceKey, string FileToken)
        {
            this.RequestAVSReportAsync(ServiceKey, FileToken, null);
        }

        /// <remarks/>
        public void RequestAVSReportAsync(string ServiceKey, string FileToken, object userState)
        {
            if ((this.RequestAVSReportOperationCompleted == null))
            {
                this.RequestAVSReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestAVSReportOperationCompleted);
            }
            this.InvokeAsync("RequestAVSReport", new object[] {
                    ServiceKey,
                    FileToken}, this.RequestAVSReportOperationCompleted, userState);
        }

        private void OnRequestAVSReportOperationCompleted(object arg)
        {
            if ((this.RequestAVSReportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestAVSReportCompleted(this, new RequestAVSReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/RequestPayNowInvoice", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RequestPayNowInvoice([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string serviceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string fileToken)
        {
            object[] results = this.Invoke("RequestPayNowInvoice", new object[] {
                    serviceKey,
                    fileToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRequestPayNowInvoice(string serviceKey, string fileToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RequestPayNowInvoice", new object[] {
                    serviceKey,
                    fileToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRequestPayNowInvoice(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RequestPayNowInvoiceAsync(string serviceKey, string fileToken)
        {
            this.RequestPayNowInvoiceAsync(serviceKey, fileToken, null);
        }

        /// <remarks/>
        public void RequestPayNowInvoiceAsync(string serviceKey, string fileToken, object userState)
        {
            if ((this.RequestPayNowInvoiceOperationCompleted == null))
            {
                this.RequestPayNowInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestPayNowInvoiceOperationCompleted);
            }
            this.InvokeAsync("RequestPayNowInvoice", new object[] {
                    serviceKey,
                    fileToken}, this.RequestPayNowInvoiceOperationCompleted, userState);
        }

        private void OnRequestPayNowInvoiceOperationCompleted(object arg)
        {
            if ((this.RequestPayNowInvoiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestPayNowInvoiceCompleted(this, new RequestPayNowInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/IsValidServiceKey", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable = true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] IsValidServiceKey([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string MethodKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string InstructionCode, int SofwareVendorCode, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SofwareVendorCodeSpecified)
        {
            object[] results = this.Invoke("IsValidServiceKey", new object[] {
                    MethodKey,
                    ServiceKey,
                    InstructionCode,
                    SofwareVendorCode,
                    SofwareVendorCodeSpecified});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginIsValidServiceKey(string MethodKey, string ServiceKey, string InstructionCode, int SofwareVendorCode, bool SofwareVendorCodeSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("IsValidServiceKey", new object[] {
                    MethodKey,
                    ServiceKey,
                    InstructionCode,
                    SofwareVendorCode,
                    SofwareVendorCodeSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndIsValidServiceKey(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void IsValidServiceKeyAsync(string MethodKey, string ServiceKey, string InstructionCode, int SofwareVendorCode, bool SofwareVendorCodeSpecified)
        {
            this.IsValidServiceKeyAsync(MethodKey, ServiceKey, InstructionCode, SofwareVendorCode, SofwareVendorCodeSpecified, null);
        }

        /// <remarks/>
        public void IsValidServiceKeyAsync(string MethodKey, string ServiceKey, string InstructionCode, int SofwareVendorCode, bool SofwareVendorCodeSpecified, object userState)
        {
            if ((this.IsValidServiceKeyOperationCompleted == null))
            {
                this.IsValidServiceKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidServiceKeyOperationCompleted);
            }
            this.InvokeAsync("IsValidServiceKey", new object[] {
                    MethodKey,
                    ServiceKey,
                    InstructionCode,
                    SofwareVendorCode,
                    SofwareVendorCodeSpecified}, this.IsValidServiceKeyOperationCompleted, userState);
        }

        private void OnIsValidServiceKeyOperationCompleted(object arg)
        {
            if ((this.IsValidServiceKeyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidServiceKeyCompleted(this, new IsValidServiceKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/AccountServiceKeys", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable = true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] AccountServiceKeys([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string MethodKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string AccountNo, int SoftwareVendorCode, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SoftwareVendorCodeSpecified)
        {
            object[] results = this.Invoke("AccountServiceKeys", new object[] {
                    MethodKey,
                    AccountNo,
                    SoftwareVendorCode,
                    SoftwareVendorCodeSpecified});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAccountServiceKeys(string MethodKey, string AccountNo, int SoftwareVendorCode, bool SoftwareVendorCodeSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AccountServiceKeys", new object[] {
                    MethodKey,
                    AccountNo,
                    SoftwareVendorCode,
                    SoftwareVendorCodeSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndAccountServiceKeys(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void AccountServiceKeysAsync(string MethodKey, string AccountNo, int SoftwareVendorCode, bool SoftwareVendorCodeSpecified)
        {
            this.AccountServiceKeysAsync(MethodKey, AccountNo, SoftwareVendorCode, SoftwareVendorCodeSpecified, null);
        }

        /// <remarks/>
        public void AccountServiceKeysAsync(string MethodKey, string AccountNo, int SoftwareVendorCode, bool SoftwareVendorCodeSpecified, object userState)
        {
            if ((this.AccountServiceKeysOperationCompleted == null))
            {
                this.AccountServiceKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAccountServiceKeysOperationCompleted);
            }
            this.InvokeAsync("AccountServiceKeys", new object[] {
                    MethodKey,
                    AccountNo,
                    SoftwareVendorCode,
                    SoftwareVendorCodeSpecified}, this.AccountServiceKeysOperationCompleted, userState);
        }

        private void OnAccountServiceKeysOperationCompleted(object arg)
        {
            if ((this.AccountServiceKeysCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AccountServiceKeysCompleted(this, new AccountServiceKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INIWS_NIF/MerchantStatementSourceStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public MerchantStatementSourceStatusResponse MerchantStatementSourceStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ServiceKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string Date)
        {
            object[] results = this.Invoke("MerchantStatementSourceStatus", new object[] {
                    ServiceKey,
                    Date});
            return ((MerchantStatementSourceStatusResponse)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginMerchantStatementSourceStatus(string ServiceKey, string Date, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("MerchantStatementSourceStatus", new object[] {
                    ServiceKey,
                    Date}, callback, asyncState);
        }

        /// <remarks/>
        public MerchantStatementSourceStatusResponse EndMerchantStatementSourceStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((MerchantStatementSourceStatusResponse)(results[0]));
        }

        /// <remarks/>
        public void MerchantStatementSourceStatusAsync(string ServiceKey, string Date)
        {
            this.MerchantStatementSourceStatusAsync(ServiceKey, Date, null);
        }

        /// <remarks/>
        public void MerchantStatementSourceStatusAsync(string ServiceKey, string Date, object userState)
        {
            if ((this.MerchantStatementSourceStatusOperationCompleted == null))
            {
                this.MerchantStatementSourceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMerchantStatementSourceStatusOperationCompleted);
            }
            this.InvokeAsync("MerchantStatementSourceStatus", new object[] {
                    ServiceKey,
                    Date}, this.MerchantStatementSourceStatusOperationCompleted, userState);
        }

        private void OnMerchantStatementSourceStatusOperationCompleted(object arg)
        {
            if ((this.MerchantStatementSourceStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MerchantStatementSourceStatusCompleted(this, new MerchantStatementSourceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    public partial class MerchantStatementSourceStatusResponse
    {

        private bool creditCardsProcessedField;

        private bool creditCardsProcessedFieldSpecified;

        private string errorCodeField;

        /// <remarks/>
        public bool CreditCardsProcessed
        {
            get
            {
                return this.creditCardsProcessedField;
            }
            set
            {
                this.creditCardsProcessedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditCardsProcessedSpecified
        {
            get
            {
                return this.creditCardsProcessedFieldSpecified;
            }
            set
            {
                this.creditCardsProcessedFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ErrorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestActionDateCompletedEventHandler(object sender, RequestActionDateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestActionDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestActionDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestInterimMerchantStatementCompletedEventHandler(object sender, RequestInterimMerchantStatementCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestInterimMerchantStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestInterimMerchantStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestMerchantStatementCompletedEventHandler(object sender, RequestMerchantStatementCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestMerchantStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestMerchantStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RetrieveMerchantStatementCompletedEventHandler(object sender, RetrieveMerchantStatementCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveMerchantStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveMerchantStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestTransactionTypesCompletedEventHandler(object sender, RequestTransactionTypesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestTransactionTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestTransactionTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RetrieveTransactionTypesCompletedEventHandler(object sender, RetrieveTransactionTypesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveTransactionTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveTransactionTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void LegacyCompactBatchFileUploadCompletedEventHandler(object sender, LegacyCompactBatchFileUploadCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LegacyCompactBatchFileUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LegacyCompactBatchFileUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void LegacyBatchFileUploadCompletedEventHandler(object sender, LegacyBatchFileUploadCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LegacyBatchFileUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LegacyBatchFileUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void BatchFileUploadCompletedEventHandler(object sender, BatchFileUploadCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchFileUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BatchFileUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestFileUploadReportCompletedEventHandler(object sender, RequestFileUploadReportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestFileUploadReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestFileUploadReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestCombinedUploadReportForDateCompletedEventHandler(object sender, RequestCombinedUploadReportForDateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestCombinedUploadReportForDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestCombinedUploadReportForDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestCreditDataReportCompletedEventHandler(object sender, RequestCreditDataReportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestCreditDataReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestCreditDataReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestAVSReportCompletedEventHandler(object sender, RequestAVSReportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestAVSReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestAVSReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void RequestPayNowInvoiceCompletedEventHandler(object sender, RequestPayNowInvoiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestPayNowInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RequestPayNowInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void IsValidServiceKeyCompletedEventHandler(object sender, IsValidServiceKeyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidServiceKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal IsValidServiceKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void AccountServiceKeysCompletedEventHandler(object sender, AccountServiceKeysCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccountServiceKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AccountServiceKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void MerchantStatementSourceStatusCompletedEventHandler(object sender, MerchantStatementSourceStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MerchantStatementSourceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal MerchantStatementSourceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public MerchantStatementSourceStatusResponse Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((MerchantStatementSourceStatusResponse)(this.results[0]));
            }
        }
    }

}
